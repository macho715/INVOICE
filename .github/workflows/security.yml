name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 매주 월요일 오전 2시에 보안 스캔 실행
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 의존성 보안 스캔
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit
        
    - name: Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
        
    - name: Pip audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  # 정적 보안 분석
  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Semgrep
      run: |
        pip install semgrep
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto . --json --output=semgrep-report.json || true
        semgrep --config=auto . --severity=ERROR --severity=WARNING
        
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -ll
        
    - name: Upload static analysis reports
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-reports
        path: |
          semgrep-report.json
          bandit-report.json

  # 시크릿 스캔
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog secret scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        filter: paths
        paths: |
          *.py
          *.json
          *.yml
          *.yaml
          *.md
          *.txt
          
    - name: Run GitLeaks secret scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # 컨테이너 보안 스캔 (Dockerfile이 있는 경우)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Build Docker image
      run: |
        docker build -t invoice-audit-system:latest .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'invoice-audit-system:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 보안 보고서 통합
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-analysis, secret-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Download all security reports
      uses: actions/download-artifact@v3
      with:
        path: security-reports/
        
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "## Scan Date: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "### Dependency Vulnerabilities" >> security-summary.md
        if [ -f "security-reports/dependency-security-reports/safety-report.json" ]; then
          echo "✅ Safety scan completed" >> security-summary.md
        else
          echo "❌ Safety scan failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "### Static Analysis" >> security-summary.md
        if [ -f "security-reports/static-analysis-reports/semgrep-report.json" ]; then
          echo "✅ Semgrep scan completed" >> security-summary.md
        else
          echo "❌ Semgrep scan failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "### Secret Detection" >> security-summary.md
        echo "✅ TruffleHog scan completed" >> security-summary.md
        echo "✅ GitLeaks scan completed" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
