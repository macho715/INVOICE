name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Docker 이미지 빌드 및 테스트
  build-and-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production
        
    - name: Test Docker image
      run: |
        # 이미지가 정상적으로 실행되는지 테스트
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "import invoice_audit; print('✅ Import successful')"
        
        # SHPT 시스템 테스트
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python shpt_audit_system.py --test-mode
        
        # DOMESTIC 시스템 테스트
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python domestic_audit_system.py --test-mode

  # 보안 스캔
  security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # 이미지 크기 최적화
  optimize-image:
    name: Optimize Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build optimized image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:optimized
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Analyze image size
      run: |
        docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:optimized
        
        # 이미지 크기 비교
        LATEST_SIZE=$(docker images --format "table {{.Size}}" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest | tail -n 1)
        OPTIMIZED_SIZE=$(docker images --format "table {{.Size}}" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:optimized | tail -n 1)
        
        echo "Latest image size: $LATEST_SIZE"
        echo "Optimized image size: $OPTIMIZED_SIZE"

  # 알림
  notify:
    name: Notify Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-and-test.result == 'success'
      run: |
        echo "✅ Docker 이미지 빌드 성공"
        echo "📦 이미지: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "🔒 보안 스캔: ${{ needs.security-scan.result }}"
        
    - name: Notify on failure
      if: needs.build-and-test.result == 'failure'
      run: |
        echo "❌ Docker 이미지 빌드 실패"
        exit 1
